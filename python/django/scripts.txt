django structure :

myproject/
    manage.py
    myproject/
        settings.py
        urls.py
        wsgi.py
    app1/
    app2/

run the the server 
	python manage.py runserver   
create the tables 
	python manage.py migrate 
create superuser 
	python manage.py createsuperuser 
	
create app 
	python manage.py startapp app_name 
	for  creating classes for app  write inside models.py (classes,func etc)
	add it to admin menu from admin.py
	add the app name to settings.py
	
	run : (terminal)
	python manage.py makemigrations (store the updates)
	python manage.py migrate (apply the updates)
	
	create class object for app  
	
	python manage.py shell
	from app_name.models import app_class 
	app_class.objects.all()  [lists all the current objects]
	app_class.objects.create(param1='',param2='',...) [new obj]
	
	
making changes app_class :

	after adding new fields , to sync with the old objects 
	we must provide some default values , since the old objects
	dont know anything about new fields
	
blank , and null keyword :

	blank : whether field can be left as empty 
	null : whether it will store "null" for a blank field instead of empty-string  
		it can diff. between "no data" and "empty data"
	

default to custom home-page (django) : 	

	from django.http import HttpResponse
	use HttpResponse() to render html onto pages 
	then add the url into url.py , [process mentioned there]
	
URL routing and requests  :
	
	import the view_func from app 
	write into url.py -> url_pattern
		path('contact/', contact_view, name='home') ,
		path('home/', homepage_view, name='home') ,
		path('', homepage_view, name='home') ,
		
	
	using request.user to detect user : 
	
	def homepage_view(request,*args,**kwargs) :
		print(request.user) 
		return HttpResponse("<h1>Hello World!</h1>") # html string 
		
		
django template : 

	instead of writing the entire html for page_view
	we can also write an home.html , contact.html and then render it
	
	def homepage_view(request) :
		print(request.user)
		return render(request,"home.html",{}) # syntax
		
	create a separate folder named "templates" and write the html there
	inside settings.py -> import os 
	then add "templates" folder's path to settings.py -> templates[] -> DIR = [os.path.join(BASE_DIR,"templates")]
	
	(this path function will work for all devices)
	
	
django templating engine : (template inheritence)
	
	lets say i have a base.html template which i want to follow
	for all html without writing from 0 each time
	
	create  a "base.html" and write the structure there  and include this part 
	
		{% block content %}
			replace me 
		{% endblock content %}
	
	then inside home.html , write using this syntax
	
		{% extends "base.html" %}
		{% block content %}
		
		<h1>Hello World</h1>
		<p>This is a template</p>
		
		{% endblock content %}

(note that templates  tags or syntax are for html file )
include template tags :

	to include one html files content into another html 
	
	{% include navbar.html %}  #template tag
	

rendering context in a template  :

	def contact_view(request,*args,**kwargs) :
    my_dict = {
        "my_id"   : "41123" ,
        "my_dept" : "cse" ,
        "my_name" : "hasan" 
    } # my_dict is the context 
	
    print(request.user) 
    return render(request,"contact.html",my_dict)
	
	# include it in .html using the following format : 
	{{my_id}}, {{my_dept}}, {{my_name}}
	
	
	
for loop inside template :

	lets say we have a list , but we want to render item by item
	we can do  so by for loop inside template to render them separately 
	
		
	def contact_view(request,*args,**kwargs) :
		my_dict = {
			"my_id"   : "41123" ,
			"my_dept" : "cse" ,
			"my_name" : "hasan" ,
			"my_list" : [310,308,309,302] 
		}
		print(request.user) 
		return render(request,"contact.html",my_dict)
		
		
	to loop over my_list we can use : (inside contact.html)
	
		<ul>
			{% for item in my_list %}
				<li>{{item}}</li>
			{% endfor %}
		</ul>
		
	use {{forloop.counter}} -> to get the iteration number 
	
	
template conditional :

	{% if condition%}
	
	{% elif condition%}
	
	{% else %}
	
	{% endif %}
	
	
template tags and filters :

	for each html entity we can add some tags to format or mod that entity -> data|tag1|tag2|.. 
	the tag order matters and they are applied from left to right 
	
	
render data from database with model :

	http://127.0.0.1:8000/admin/products/product/3/change/
	
	we notice that it has id = 3 , but we didnt have id field for data 
	this is because django has in-built id for each object of class 
	we can find those default ones in : myproject\products\migrations\0001_initial.py
	
	
	ex : lets say we have some products in Product class , we want to render all those product into a html page 
	
	from .models import Product  # .models is used for relative file path 
	
	
	
how django template-loader loads works with apps 

	if we ever encounter an error about file_path -> we can see the report of template-loader postmortem
	
	there we can see the paths django explored to find the desired file
	for products app , we can see django also checks for the file in : products/templates/show_product.html
	it  means for an app , we can place the templates in : app_name/templates/file.html 
	**this is called in-app template **	
	
	
django  model forms : 

	create a form , that will create a class object from the data given into the form 
	
	
raw html form : 
	
	request type : .GET : to get info from url  , 	.POST : to save info in the backend 
	action : it takes to another url 
	
	request.method  ==  "POST" or requests.method == "GET"
	print(request.POST)
	print(request.GET)
	
	
pure django model : 

	other than , raw html form , we can use django in-built form , which has data_validation as well 

	!!!!!!!!!!!!!! task : use django models widget = forms.Textarea(attrs= {})  to customize form fields !!!!!!!!!!!
	
	** we can use attr={} to mod. the html content **
	class RawProductForm(forms.Form) :

		title = forms.CharField(label='title',widget=forms.Textarea(
			attrs={
				"placeholder" : "title of product" ,
				"rows" : 5 ,
				"cols" : 50 
			}
		))
		desc  = forms.CharField(required=False,widget=forms.Textarea(
			attrs={
				"class" : "class-for-desc" ,
				"id"  : "id-for-desc" ,
				"rows" : 20 , 
				"cols" : 120 
			}
		))
		price = forms.DecimalField(initial=199.99) 
	
	** we can use django form fields to override raw-html form fields
	
	
form validation method :

	 when form_name.is_valid()  is called : for each field_name clean_<fieldname>() is called 
		we can use this behaviour to perform custom form_validation
		
	**  obj = products.objects.get(id=1)
	
	
initial values for form : (not placeholder , actual data )

	** task : mod. your func. in views.py to have initial values for each field   
	
	initial_data = {
        "title" : "this is an initial title" ,
        "desc" : "this is an initial desc" ,
        "price" : 69.99 
    }
    my_form = RawProductForm(initial=initial_data) # pass the initial data
	
	** use dict. and pass it into functions of views.py to render it 

dynamic url routing :

	task : there are many product object created for Product class 
			make sure we can access them using their in url , (ex : product/id/)
			

handle does not exist :

	continuation of dynamic-url-routing 
	
	def dynamic_page_view(request,my_id) :
		try :
			obj = Product.objects.get(id=my_id)
		except Product.DoesNotExist :
			raise Http404

		context ={
			"obj" : obj
		}
		return render(request,"product.html",context)
	
	task : if we look for a product_id which is not present , raise an error Http404
	
delete and confirm : 

	task : delete a Product object from database from web
	

View of a List of Database Objects
	task : render all the created objects of Product in html 

dynamic linking of url 



Class Based Views - ListView