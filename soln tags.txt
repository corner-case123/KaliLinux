

-> Soln Tags :(*****constructive_skills/algo: 5)

1) observation : 15
  -> print things and find pattern : 1 
2) logical analysis of problem +  claim/hypothesis/deduction : 59
3) dry-run some cases and look at the findings/problem from diff. angle : 19
4) solve the problem for simpler cases and then solve the actual problem : 6
5) simplify/modify the problem and form/modify equation from statement : 11
  -> use math equation and inequality to solve : 3
6) bold claim/intuitive claim (without proof): 5
7) lets say i have a soln &&  what characteristics would it have / working from soln / working backwards :9
8) similar to past problems : 10
9) formulate the problem-statement / make a proper structure from the statement  : 3
10) solid knowledge/theory : 2
11) solving by sub-problems/components/different cases(for n%2==0 soln1 and n%2==1 soln2) : 20
12) soln design using DS : 4
13) build up soln  : 
	-> we have to solve for n dimensions 
	-> first solve for 1 dim , then add 2nd one , then 3rd and so on
	-> make sure this property is applicable (counting problems nCr,bar & star)
14) for small constraint always consider dp soln : 1 


## think in a dp manner -> how we transition from one state (choice) to another :  9
  -> this also helps to find proof 
## look at the constraints , conditions and sample cases
  -> can you find any soln idea or observation from sample :  7
  -> do you see any special constraint or condition that can provide  hint or give  idea : 5
## check if it has a monotonic property or not : 7
## deal with the problems first  :  3
  -> lets say i have to minimise some cost 
  -> for this , check which entities affects my minimum cost the most
  -> deal with them first 


tips : ## sometimes there are some important corner cases make sure to handle them
1) sometimes make  some claim like (eg:this loop will not run for long or this is the best way) : 1  
2) pure brute-force : 1 
3) consider/simulate all the cases before starting to code 
4) dont over-complicate , start from unoptimized , then  go to optimization , not the other way around 
5) check if soln. is hidden in the sample cases !!!!!!!!!

issues :

1)  implementation issue : 4
2) not handling all the cases / missing cases : 4
3) wrong claim / incorrect-analysis : 7
3) improve observation skill :
4) did not make bold claims : 1 
5) too slow / poor attention and focus  : 15
6) give up too early : 1
7) correct idea but wrong way of implementation : 1 
