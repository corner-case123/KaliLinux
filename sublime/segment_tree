#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, std::less<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;
#define ln '\n'
#define ull unsigned  long long
#define ll long long
#define vll vector<ll>
#define pll pair<ll, ll>
#define ff first
#define vpll vector<pair<ll,ll>>
#define pii pair<int,int> b
#define ld long double
#define ss second
using namespace std;


class SegmentTree {
    vector<ll> tree, lazy;
    ll n;

    void build(const vector<ll> &arr, ll node, ll start, ll end) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            ll mid = (start + end) / 2;
            build(arr, 2 * node, start, mid);
            build(arr, 2 * node + 1, mid + 1, end);
            tree[node] = tree[2 * node] + tree[2 * node + 1];
        }
    }

    void propagate(ll node, ll start, ll end) {
        if (lazy[node] != 0) {
            tree[node] += (end - start + 1) * lazy[node];

            if (start != end) {  // Not a leaf node
                lazy[2 * node] += lazy[node];
                lazy[2 * node + 1] += lazy[node];
            }

            lazy[node] = 0;  // Reset lazy value
        }
    }

    void range_update(ll node, ll start, ll end, ll l, ll r, ll value) {
        propagate(node, start, end);

        if (start > end || start > r || end < l) return;

        if (start >= l && end <= r) {
            tree[node] += (end - start + 1) * value;
            if (start != end) {
                lazy[2 * node] += value;
                lazy[2 * node + 1] += value;
            }
            return;
        }

        ll mid = (start + end) / 2;
        range_update(2 * node, start, mid, l, r, value);
        range_update(2 * node + 1, mid + 1, end, l, r, value);

        tree[node] = tree[2 * node] + tree[2 * node + 1];
    }

    ll query(ll node, ll start, ll end, ll l, ll r) {
        propagate(node, start, end);

        if (start > end || start > r || end < l) return 0;

        if (start >= l && end <= r) return tree[node];

        ll mid = (start + end) / 2;
        ll left_sum = query(2 * node, start, mid, l, r);
        ll right_sum = query(2 * node + 1, mid + 1, end, l, r);

        return left_sum + right_sum;
    }

public:
    SegmentTree(const vector<ll> &arr) {
        n = arr.size();
        tree.resize(4 * n);
        lazy.resize(4 * n, 0);
        build(arr, 1, 0, n - 1);
    }

    void range_update(ll l, ll r, ll value) {
        range_update(1, 0, n - 1, l, r, value);
    }

    ll query(ll l, ll r) {
        return query(1, 0, n - 1, l, r);
    }
};