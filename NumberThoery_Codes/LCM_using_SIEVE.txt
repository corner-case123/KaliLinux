->this below code allows us to calculate LCM  where the LCM can get very large (>ull)
-> primes vector stores all the needed prime numbers
-> map stores max power for each prime number
-> LCM = p1^(max power of p1) * p2 ^ (max power of p2) * .. 

vector<int> primes ; 

string multiplyStrings(const string& num1, const string& num2) {
    if (num1 == "0" || num2 == "0") {
        return "0";
    }

    int n = num1.size(), m = num2.size();
    vector<int> result(n + m, 0);

    // Perform multiplication in reverse
    for (int i = n - 1; i >= 0; --i) {
        int digit1 = num1[i] - '0';
        for (int j = m - 1; j >= 0; --j) {
            int digit2 = num2[j] - '0';
            int mul = digit1 * digit2;

            int sum = mul + result[i + j + 1]; // Add to existing position
            result[i + j + 1] = sum % 10;     // Store the last digit
            result[i + j] += sum / 10;        // Carry to the next position
        }
    }

    // Convert result vector to a string
    string product;
    bool leadingZero = true; // To skip leading zeros
    for (int num : result) {
        if (leadingZero && num == 0) {
            continue; // Skip leading zeros
        }
        leadingZero = false;
        product += to_string(num);
    }

    return product;
}
void solve(){
    int  n ; cin >> n  ;
    map<int,int> mp ; 
    vector<int> a(n) ; for(auto &e:a) cin >> e ; 
    for(auto &e:a){
        ll n = e ; 
        for(auto &p:primes){
            if (p*p>n) break ; 
            int ct =  0; 
            while(n%p==0) ct++ , n/=p  ;
            mp[p] = max(mp[p],ct) ; 
        }
        if (n>1) mp[n] = max(mp[n],1) ;
    }
    string s = "1" ; 
    for(auto &e:mp){
        while(e.ss--){
            s = multiplyStrings(s,to_string(e.ff)) ;
        }
    }
    cout << s << ln ;
	return ;
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    vector<int> mark(1e4+1,1) ;
    for(ll i=2;i<=1e4;i++){
        if (mark[i]){
            primes.push_back(i) ;
            for(ll j=i*i;j<=1e4;j+=i){
                mark[j] = 0 ; 
            }
        }
    }
    ll t ; cin >> t ;
    for(ll i=1;i<=t;i++){
        cout << "Case " << i << ": " ;
        solve() ;
    }
    return 0;
}

