

-> if we want to calculate sum of GCD(i,n) for each i in [1,n] efficiently we can use ETF 
-> the core idea is GCD(i,n) = d  (i in [1,n])
	-> here d can only be one of the divisors of d 
	-> for ex : for n=12 , d = {1,2,3,4,6,12}
-> i = k*d  -> gcd(i,n) = gcd(k*d,n) = d -> gcd(k,n/d) = 1 
-> now the most important part : what does gcd(k,n/d) = 1 say to us
-> it says if we want two number i and n such that i <= n and gcd(i,n)  =  d ;
	-> we have to build them from co-prime numbers such that gcd(k,n/d) =  1
	-> otherwise their gcd wont be exactly d 
	-> for ex : 2 4 and not co-prime so gcd(2*3,4*3) is not  3
	-> but : 2 , 3 is co-prime , so gcd(2*5,3*5) is 5 
	
Code for calculating GCD efficiently using ETF :

code 1 : (classic)  

vll phi ; 
void SieveETF(){
	phi.resize(1e5+1) ; 
	for(ll i=1;i<=1e5;i++){
		phi[i] = i  ;
	}
	for(ll i=2;i<=1e5;i++){
		if(phi[i]==i){ // i is prime
			for(ll j=i;j<=1e5;j+=i){
				// totient formula : phi[i] = i * (1-1/p1) * (1-1/p2) * ..
				// dp formula : phi[i] = (phi[i]-phi[i]/p1)
				phi[j] = (phi[j]-phi[j]/i) ; // using the euler totient formula 
			}
		}
	}
}
void sumOfGCDusingETF(ll n){ // calculates sum of  gcd(i,n) for every i [1,n]
	ll sm = 0 ; 
	for(ll j=1;j*j<=n;j++){
		if (n%j==0){
			sm += j * phi[n/j] ;
			if (j!=n/j){
				sm += (n/j) * phi[j] ; 
			}
		}
	}
	cout << sm << ln ;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    SieveETF() ;
    sumOfGCDusingETF(10) ;
    return 0;
}


code 2 : (simpler)

....

void sumOfGCDusingETF(ll n){  //calculates sum of  gcd(i,n) for every i [1,n]
	vll dp(n+1,0) ;
	for(ll i=1;i<=n;i++){
		for(ll j=i;j<=n;j+=i){
			dp[j]  += i * phi[j/i] ;
		}
	}
	cout << dp[n] << ln ;
}

....


-> code 1 and code 2 uses the same ETF , GCD  concept , but the implementation style is a bit different
-> but code 2 is very fast . if we want the sum for many n 
-> code 1 is fast if we want sum for a single n 
