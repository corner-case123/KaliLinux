-> both function have a complexity : avg case -> sqrt(n)/ log2(sqrt(n))    worst case -> sqrt(n)   [this avg case is very important because most of the time the avg case is used]
-> the number of divisors for n is  : approx  cuberoot(n)

FORMULA FOR CALCULATING SUM OF DIVISORS ->[APPROACH-2] sigma =  (p1^(e1+1)-1)/(p1-1) * (p2^(e2+1)-1)/(p2-1) * ...
 -> in practice , the approach-1 is faster 

[APPROACH-1]

vll primes ; // stores the primes upto 1e6
ll calculate_no_of_div(ll n){  // it calculates the number of divisors of n 
	ll ans  = 1  ;
	for(auto e:primes){
		if (e*e>n) break ; // this is a very imp condition and conceptual
		ll ct = 1 ;
		while(n%e==0) n/= e , ct++ ; 
		ans *= ct  ;
	}
	if (n>1) ans *= 2 ;
	return ans ;  
}

ll cal_sm_of_div(ll n){ // it calculates the sum of divisors of n  
	ll ans = 1 ;
	for(auto e:primes){
		if (e*e >n) break ;   // this is a very imp condition and conceptual
		ll sm = 1 , pow = 1 ;  
		while(n%e==0) n/= e , pow *= e , sm += pow ;
		ans *= sm ; 
	}
	if (n>1) ans *= (n+1) ;
	return ans ;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	// prime mark array
    vll p(1e6+1,1) ;
	// sieve 
    for(ll i=2;i<=1e6;i++){ 
    	if (p[i]==0) continue ;
    	primes.push_back(i) ;
    	for(ll j=i*i;j<=1e6;j+=i){
    		p[j] = 0 ;
    	}
    }
    return 0;
}
